import java.io.*;
import com.obomprogramador.tools.jqana.model.defaultimpl.RetriveTestResults;

String readFile(File htmlFile)  {
	BufferedReader br = null;
    StringBuilder sb = new StringBuilder();
    try {
    	br = new BufferedReader(new FileReader(htmlFile));
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append("\n");
            line = br.readLine();
        }
        return sb.toString();
    } catch (IOException e) {
		e.printStackTrace();
	} finally {
        try {
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    return sb.toString();
}


File file = new File( basedir, "target/jqana-output/jqana.xml" );
if ( !file.isFile() )
{
    throw new FileNotFoundException( "Could not find generated XML: " + file );
}

File fileHtml = new File( basedir, "target/site/jqana-report.html" );
if ( !fileHtml.isFile() )
{
    throw new FileNotFoundException( "Could not find generated HTML: " + fileHtml );
}

// Check metrics results

String [][] testClasses = RetriveTestResults.getResults(null);
String output = readFile(fileHtml);

for (int x=0; x<testClasses.length; x++) {
	print("*** Verifying package: " + testClasses[x][0] + " class: " + testClasses[x][1]);
	if (!output.contains("<a name=\"" + testClasses[x][0] + "\">")) {
		throw new Exception("*** Error a package is missing: " + testClasses[x][0]);
		break;
	}
	if (!output.contains("<a href=\"#" + testClasses[x][1] + "\">")) {
		throw new Exception("*** Error a class is missing: " + testClasses[x][1]);
		break;	
	}
	
	StringBuilder tagClass = new StringBuilder();
	tagClass.append("<a href=\"#" + testClasses[x][1] + "\">" + testClasses[x][1] + "</a></td>"); 
	for (int y=2; y<5; y++) {
		print("*** Verifying metric number: " + y + " value: " + testClasses[x][y]);
		String appendString = "<td style=\"text-align:center;\">" + Double.parseDouble(testClasses[x][y]) + "</td>";                           
		String searchString = tagClass.toString() + appendString;   		
		if (!output.contains(searchString)) {
			appendString = "<td style=\"text-align:center;\"><span style=\"font-weight:bold;color:red\">"              
					+ Double.parseDouble(testClasses[x][y]) + "</span></td>";                                                                  
			searchString = tagClass.toString() + appendString;  		
			if (!output.contains(searchString)) {
				throw new Exception("*** Metric missing for class: " + testClasses[x][1] + " Metric number: " + y + " search String: " + searchString);
				break;
			}
		}
		print("*** Metric number: " + y + " OK! ");
		tagClass.append(appendString);
	}	
	
}
